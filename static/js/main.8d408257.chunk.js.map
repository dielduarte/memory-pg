{"version":3,"sources":["state/iconsMap.js","state/services.js","state/actions.js","state/guards.js","state/index.js","components/IconsGrid.js","components/GameDisplay.js","components/UserPoints.js","useJoyConSocket.js","useSocket.js","App.js","serviceWorker.js","scripts/webfrontloader.js","index.js"],"names":["regularIcons","plusIcons","map","it","startsIcons","getRandomIcon","context","nextIcon","sample","IconsMap","currentSequence","includes","addRandomIcon","assign","addUserChoice","userSequence","event","getFromActiveIconIndex","get","payload","icons","activeIconIndex","iconId","checkIfUserWon","userWon","isEqual","checkUserPoints","points","resetState","userChoicesIsOver","setJoyConAsController","controllerType","setMouseAsController","ENABLED_KEYS","setActiveIconIndex","position","isUserChoicesOver","length","sequenceCount","currentSequenceIsNotFullFiled","isPlayingWithJoyCon","Machine","id","initial","undefined","interval","states","settingUp","on","JOY_CON_CONNECTED","target","actions","JOY_CON_NOT_FOUND","setupDone","START_ROUND","KEY_CHANGE","cond","generatingRandomSequence","onEntry","invoke","src","pipe","value","take","onDone","ADD_RANDOM_ICON","userTime","ADD_USER_CHOICE","RESTART","failure","PLAY_WITH_MOUSE","guards","Container","styled","div","IconContainer","button","props","active","IconsGrid","current","send","isIconActive","key","onClick","type","data-testid","className","TextAction","GameDisplay","iconClass","matches","handleStartRound","useCallback","handleRestart","renderStartAction","renderFeedbackText","renderFailure","UserPoints","useJoyCon","socket","useEffect","msg","hasOwnProperty","buttonPressed","useSocket","useState","setSocket","socketInstance","io","GameDisplayContainer","App","useMachine","gameMachine","devTools","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d408257.chunk.js","sourcesContent":["const prefix = 'icon'\n\nconst regularIcons = [\n  `${prefix}-bottle-red`,\n  `${prefix}-bottle-blue`,\n  `${prefix}-bottle-green`,\n  `${prefix}-bottle-yellow`,\n]\n\nconst plusIcons = regularIcons.map((it) => it + '-plus')\nconst startsIcons = regularIcons.map((it) => it + '-stars')\n\nexport default [\n  ...regularIcons,\n  ...plusIcons,\n  ...startsIcons\n]","import { interval } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { sample } from 'lodash';\nimport io from 'socket.io-client';\n\nimport IconsMap from './iconsMap';\n\nexport const getRandomIconByInterval = context =>\n  interval(context.interval).pipe(\n    map(value => 'ADD_RANDOM_ICON'),\n    take(context.sequenceCount)\n  );\n\nexport const getRandomIcon = context => {\n  const nextIcon = sample(IconsMap);\n  if (context.currentSequence.includes(nextIcon)) {\n    return getRandomIcon(context);\n  }\n\n  return nextIcon;\n};\n","import { assign } from 'xstate';\nimport { isEqual, get } from 'lodash';\n\nimport { getRandomIcon } from './services';\nimport icons from './iconsMap';\n\nexport const addRandomIcon = assign({\n  currentSequence: context => [\n    ...context.currentSequence,\n    getRandomIcon(context)\n  ]\n});\n\nexport const addUserChoice = assign({\n  userSequence: (context, event) => {\n    const getFromActiveIconIndex = get(\n      event.payload,\n      'getFromActiveIconIndex',\n      false\n    );\n\n    if (getFromActiveIconIndex) {\n      return [...context.userSequence, icons[context.activeIconIndex]];\n    }\n\n    return [...context.userSequence, event.payload.iconId];\n  }\n});\n\nexport const checkIfUserWon = assign({\n  userWon: context => isEqual(context.userSequence, context.currentSequence)\n});\n\nexport const checkUserPoints = assign({\n  points: context => (context.userWon ? context.points + 10 : context.points)\n});\n\nexport const resetState = assign({\n  userWon: false,\n  userSequence: [],\n  currentSequence: [],\n  userChoicesIsOver: false,\n  activeIconIndex: -1\n});\n\nexport const setJoyConAsController = assign({\n  controllerType: 'joyCon'\n});\n\nexport const setMouseAsController = assign({\n  controllerType: 'mouse'\n});\n\nconst ENABLED_KEYS = ['dpadLeft', 'dpadRight', 'dpadUp', 'dpadDown'];\n\nexport const setActiveIconIndex = assign({\n  activeIconIndex: (context, event) => {\n    const { activeIconIndex } = context;\n    const { position } = event.payload;\n\n    if (!ENABLED_KEYS.includes(position)) return activeIconIndex;\n\n    if (position === 'dpadDown' && activeIconIndex < 11) {\n      return activeIconIndex + 1; // right\n    }\n\n    if (position === 'dpadUp' && activeIconIndex > 0) {\n      return activeIconIndex - 1; // left\n    }\n\n    if (position === 'dpadLeft' && activeIconIndex <= 5) {\n      return activeIconIndex + 6; // down\n    }\n\n    if (position === 'dpadRight' && activeIconIndex > 5) {\n      return activeIconIndex - 6; // up\n    }\n\n    return activeIconIndex;\n  }\n});\n","export const isUserChoicesOver = context => {\n  return context.userSequence.length + 1 < context.sequenceCount;\n};\n\nexport const currentSequenceIsNotFullFiled = context => {\n  return context.currentSequence.length + 1 <= context.sequenceCount;\n};\n\nexport const isPlayingWithJoyCon = context => {\n  return context.controllerType === 'joyCon';\n};\n","import { Machine } from 'xstate';\n\nimport * as actions from './actions';\nimport * as guards from './guards';\nimport { getRandomIconByInterval } from './services';\nimport icons from './iconsMap';\n\nexport default Machine(\n  {\n    id: 'memoryPg',\n    initial: 'settingUp',\n    context: {\n      points: 0,\n      currentSequence: [],\n      userSequence: [],\n      userWon: undefined,\n      interval: 1000,\n      sequenceCount: 4,\n      icons,\n      activeIconIndex: -1,\n      controllerType: 'joyCon' // joyCon or mouse\n    },\n    states: {\n      settingUp: {\n        on: {\n          JOY_CON_CONNECTED: {\n            target: 'setupDone',\n            actions: ['setJoyConAsController']\n          },\n          JOY_CON_NOT_FOUND: 'failure'\n        }\n      },\n      setupDone: {\n        on: {\n          START_ROUND: 'generatingRandomSequence',\n          KEY_CHANGE: {\n            target: 'generatingRandomSequence',\n            cond: 'isPlayingWithJoyCon'\n          }\n        }\n      },\n      generatingRandomSequence: {\n        onEntry: ['addRandomIcon'],\n        invoke: {\n          src: getRandomIconByInterval,\n          onDone: 'userTime'\n        },\n        on: {\n          ADD_RANDOM_ICON: [\n            {\n              target: '',\n              actions: 'addRandomIcon',\n              cond: 'currentSequenceIsNotFullFiled'\n            }\n          ]\n        }\n      },\n      userTime: {\n        on: {\n          KEY_CHANGE: {\n            target: '',\n            actions: ['setActiveIconIndex'],\n            cond: 'isPlayingWithJoyCon'\n          },\n          ADD_USER_CHOICE: [\n            {\n              target: '',\n              actions: ['addUserChoice'],\n              cond: 'isUserChoicesOver'\n            },\n            {\n              target: 'userChoicesIsOver',\n              actions: ['addUserChoice']\n            }\n          ]\n        }\n      },\n      userChoicesIsOver: {\n        onEntry: ['checkIfUserWon', 'checkUserPoints'],\n        on: {\n          KEY_CHANGE: {\n            target: 'generatingRandomSequence',\n            cond: 'isPlayingWithJoyCon',\n            actions: ['resetState']\n          },\n          RESTART: {\n            target: 'generatingRandomSequence',\n            actions: ['resetState']\n          }\n        }\n      },\n      failure: {\n        on: {\n          PLAY_WITH_MOUSE: {\n            target: 'setupDone',\n            actions: ['setMouseAsController']\n          }\n        }\n      }\n    }\n  },\n  {\n    actions,\n    guards\n  }\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  max-height: 174px;\n  padding: 0 10px;\n\n  @media (min-width: 768px) {\n    max-height: 116px;\n  }\n`;\n\nconst IconContainer = styled.button`\n  border: 1px solid transparent;\n  width: calc(100% / 4);\n  min-width: 32px;\n  background: transparent;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  height: 48px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 5px 0;\n\n  &:hover {\n    border: 1px solid #fff;\n  }\n\n  ${props =>\n    props.active &&\n    `\n    border: 1px solid #fff;\n  `}\n\n  @media(min-width: 768px) {\n    width: calc(100% / 6);\n  }\n`;\n\nfunction IconsGrid({ current, send }) {\n  const { context } = current;\n\n  const handleAddUserChoice = iconId => () =>\n    send({ type: 'ADD_USER_CHOICE', payload: { iconId } });\n  const isIconActive = it => context.userSequence.includes(it);\n\n  return (\n    <Container>\n      {context.icons.map((it, key) => (\n        <IconContainer\n          key={key}\n          onClick={handleAddUserChoice(it)}\n          active={isIconActive(it) || context.activeIconIndex === key}\n          data-testid={it}\n        >\n          <i className={`icon ${it}`} />\n        </IconContainer>\n      ))}\n    </Container>\n  );\n}\n\nexport default IconsGrid;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\n\nconst TextAction = styled.button`\n  font-size: 18px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  line-height: 1.5em;\n  text-transform: uppercase;\n\n  @media (min-width: 768px) {\n    font-size: 22px;\n  }\n`;\n\nfunction renderSettingUp() {\n  return <TextAction>Connecting...</TextAction>;\n}\n\nfunction renderStartAction(handleStartRound, controllerType) {\n  return (\n    <TextAction onClick={handleStartRound}>\n      {controllerType === 'joyCon'\n        ? 'PRESS ANYTHING TO START'\n        : 'CLICK HERE TO START'}\n    </TextAction>\n  );\n}\n\nfunction renderFailure(send) {\n  return (\n    <TextAction onClick={() => send('PLAY_WITH_MOUSE')}>\n      OPS! NO JOY CON FOUND :( <br />\n      CLICK HERE TO PLAY WITH MOUSE.\n    </TextAction>\n  );\n}\n\nfunction renderYourTimeText() {\n  return <TextAction>YOUR TIME</TextAction>;\n}\n\nfunction renderFeedbackText(userWon, handleRestart, controllerType) {\n  return (\n    <TextAction onClick={handleRestart}>\n      {`${userWon ? 'You got it!' : 'Not this time baby'}`}\n      <br />\n      {controllerType === 'joyCon' ? 'PRESS ANYTHING TO RESTART' : 'restart'}\n    </TextAction>\n  );\n}\n\nfunction renderIcon(iconClass) {\n  return <i className={`icon ${iconClass}`} />;\n}\n\nfunction GameDisplay({ current, send }) {\n  const { context, matches } = current;\n\n  const handleStartRound = useCallback(() => {\n    send('START_ROUND');\n  }, [send]);\n\n  const handleRestart = useCallback(() => {\n    send('RESTART');\n  }, [send]);\n\n  switch (true) {\n    case matches('settingUp'):\n      return renderSettingUp();\n    case matches('setupDone'):\n      return renderStartAction(handleStartRound, context.controllerType);\n    case matches('userChoicesIsOver'):\n      return renderFeedbackText(\n        context.userWon,\n        handleRestart,\n        context.controllerType\n      );\n    case matches('userTime'):\n      return renderYourTimeText();\n    case matches('failure'):\n      return renderFailure(send);\n    default:\n      return renderIcon(\n        context.currentSequence[context.currentSequence.length - 1]\n      );\n  }\n}\n\nexport default GameDisplay;\n","import React from 'react'\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  min-height: 80px;\n  max-height: 80px;\n  justify-content: flex-end;\n  padding: 20px 10px;\n  align-items: center;\n  font-size: 18px;\n   \n  i { margin-right: 10px; }\n   \n  @media(min-width: 768px) {\n    font-size: 22px;\n  }\n`\n\n\nfunction UserPoints({ current }) {\n  return <Container>\n    <i className=\"menu-icon menu-icon-diamond\" />\n    {current.context.points}\n  </Container>;\n}\n\nexport default UserPoints","import { useEffect } from 'react';\n\nfunction useJoyCon(socket, send) {\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('device-event', msg => {\n      const position = msg.hasOwnProperty('buttonPressed')\n        ? msg.buttonPressed\n        : undefined;\n\n      if (position === 'sr') {\n        send({\n          type: 'ADD_USER_CHOICE',\n          payload: { getFromActiveIconIndex: true }\n        });\n        return;\n      }\n\n      send({ type: 'KEY_CHANGE', payload: { position } });\n    });\n  }, [socket, send]);\n}\n\nexport default useJoyCon;\n","import io from 'socket.io-client';\nimport { useEffect, useState } from 'react';\n\nfunction useSocket(send) {\n  const [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    const socketInstance = io('http://localhost:4000');\n    socketInstance.on('connect', () => {\n      send('JOY_CON_CONNECTED');\n      setSocket(socketInstance);\n    });\n    socketInstance.on('connect_error', () => send('JOY_CON_NOT_FOUND'));\n  }, [send]);\n\n  return socket;\n}\n\nexport default useSocket;\n","import React from 'react';\nimport { useMachine } from '@xstate/react';\nimport styled from 'styled-components';\n\nimport gameMachine from './state/index';\nimport IconsGrid from './components/IconsGrid';\nimport GameDisplay from './components/GameDisplay';\nimport UserPoints from './components/UserPoints';\nimport useJoyCon from './useJoyConSocket';\nimport useSocket from './useSocket';\n\nconst GameDisplayContainer = styled.div`\n  display: flex;\n  flex: 2;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction App() {\n  const [current, send] = useMachine(gameMachine, { devTools: true });\n  const socket = useSocket(send);\n  useJoyCon(socket, send);\n\n  return (\n    <>\n      <UserPoints current={current} send={send} />\n      <GameDisplayContainer>\n        <GameDisplay current={current} send={send} />\n      </GameDisplayContainer>\n      <IconsGrid current={current} send={send} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import WebFont from 'webfontloader'\n\nWebFont.load({\n  google: {\n    families: ['Press Start 2P']\n  }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scripts/webfrontloader'\nimport './styles/iconsMap-sprites.css'\nimport './styles/menu-icons-sprites.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}